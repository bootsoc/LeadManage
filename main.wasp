app LeadManage {
  wasp: {
    version: "^0.11.1"
  },
  title: "LeadManage",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id           Int            @id @default(autoincrement())
    username     String         @unique
    password     String
    roles        String
    leads        Lead[]
    Notification Notification[]
psl=}

entity Lead {=psl
    id             Int    @id @default(autoincrement())
    name           String
    contactDetails String
    notes          String
    status         String
    category       String
    source         String
    documents      String
    user           User   @relation(fields: [userId], references: [id])
    userId         Int
psl=}

entity Notification {=psl
    id      Int    @id @default(autoincrement())
    content String
    user    User   @relation(fields: [userId], references: [id])
    userId  Int
psl=}

action createLead {
  fn: import { createLead } from "@server/actions.js",
  entities: [User, Lead]
}

action updateLead {
  fn: import { updateLead } from "@server/actions.js",
  entities: [User, Lead]
}

action deleteLead {
  fn: import { deleteLead } from "@server/actions.js",
  entities: [User, Lead]
}

action createNotification {
  fn: import { createNotification } from "@server/actions.js",
  entities: [User, Notification]
}

query getLeads {
  fn: import { getLeads } from "@server/queries.js",
  entities: [User, Lead]
}

query getLead {
  fn: import { getLead } from "@server/queries.js",
  entities: [User, Lead]
}

query getNotifications {
  fn: import { getNotifications } from "@server/queries.js",
  entities: [User, Notification]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/DashboardPage.jsx",
  authRequired: true
}

route LeadRoute { path: "/lead/:leadId", to: LeadPage }
page LeadPage {
  component: import { Lead } from "@client/pages/Lead.jsx",
  authRequired: true
}

route NotificationRoute { path: "/notifications", to: NotificationPage }
page NotificationPage {
  component: import { NotificationPage } from "@client/pages/Notification.jsx",
  authRequired: true
}
